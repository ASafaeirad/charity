datasource charity {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjs {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/dto"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model Admin {
  id String @id @default(uuid())

  username String
  password String
}

model Family {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  household   Member? @relation("Family-Household", fields: [householdId], references: [id])
  householdId Int?    @unique

  referer   Referer? @relation(fields: [refererId], references: [id])
  refererId Int?

  severity Severity

  members Member[] @relation("Family-Member")
}

model Referer {
  id Int @id @default(autoincrement())

  name   String?
  Family Family[]
}

model Member {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addicted      Boolean?
  dateOfBirth   DateTime?
  fatherName    String?
  gender        Gender?
  insurance     String?
  issuedAt      DateTime?
  maritalStatus MaritalStatus?
  nationality   String?
  religion      Religion?

  educationStatus EducationStatus?
  lastDiploma     Diploma?

  disabilityStatus      DisabilityStatus?
  disabilityDescription String?

  healthStatus      HealthStatus
  healthDescription String?

  Contact   Contact @relation(fields: [contactId], references: [id])
  contactId String

  Jobs    Job[]
  subsidy Subsidy[]

  MemberOfFamilyId Family? @relation("Family-Member", fields: [memberOfFamilyId], references: [id])
  memberOfFamilyId Int?    @unique

  HouseholdOfFamily Family[] @relation("Family-Household")
}

model Job {
  id String @id @default(uuid())

  title    String?
  income   Income?
  Member   Member? @relation(fields: [memberId], references: [id])
  memberId Int?
}

model Subsidy {
  id String @id @default(uuid())

  type        SubsidyType
  description String?
  income      Int

  Member   Member? @relation(fields: [memberId], references: [id])
  memberId Int?
}

model Contact {
  id String @id @default(uuid())

  homeAddress       String?
  workAddress       String?
  homePhoneNumber   String?
  mobilePhoneNumber String?
  workPhoneNumber   String?

  Member Member[]
}

model Need {
  id Int @id @default(autoincrement())
}

model Campaign {
  id Int @id @default(autoincrement())
}

enum EducationStatus {
  Illiterate
  Student
  Dropout
  Graduated
}

enum Diploma {
  Elementary
  Cycle
  Diploma
  Bachelor
  Master
}

enum Gender {
  Male
  Female
}

enum Religion {
  Shia
  Sunni
  Jewish
  Christian
  Zoroaster
}

enum MaritalStatus {
  Married
  Single
  Divorced
  Abandoned
  DiedSpouse
}

enum Income {
  Fixed
  Periodic
  None
}

enum DisabilityStatus {
  Healthy
  Disability
}

enum HealthStatus {
  Healthy
  Sick
}

enum SubsidyType {
  General
  Justice
  Livelihood
  Committee
  Rehabilitation
  Veteran
  OtherCharity
}

enum Severity {
  Critical
  Poor
  Case
}
